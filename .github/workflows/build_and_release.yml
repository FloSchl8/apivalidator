name: "Build and create Release"
on:
  push:
    tags:
      - v**
  workflow_dispatch:

jobs:
  package:
    strategy:
      matrix:
        go-version: [1.19]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          cache: true
          go-version: ${{ matrix.go-version }}
      - name: Set Version
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Get Wails dependencies
        run: sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - name: Wails doctor
        run: wails doctor
      - name: Build package macOS
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          echo "building on ${{ matrix.os }}"
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails build
          echo "converting .app into a .dmg"
          npm install -g appdmg
          cp ./build/darwin/dmg-spec.json ./build/bin/dmg-spec.json
          cd ./build/bin/
          appdmg dmg-spec.json apivalidator.dmg
          zip apivalidator.zip apivalidator.dmg
        if: matrix.os == 'macos-latest'
      - name: Build package linux
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "building on ${{ matrix.os }}"
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails build
          tar -czvf apivalidator.tar.gz ./build/bin/ApiValidator
        if: matrix.os == 'ubuntu-latest'
      - name: Build package windows
        run: |
          $GP = (go env GOPATH)
          $env:path = "$env:path;$GP\bin"
          echo "building on ${{ matrix.os }}"
          New-Item -ItemType directory -Path "$HOME\.wails" -Force
          Copy-Item -Path "$PWD\wails.json" -Destination "$HOME\.wails\wails.json"
          choco install mingw
          wails build
          Compress-Archive -Path .\build\bin\ApiValidator* -DestinationPath .\apivalidator.zip
        if: matrix.os == 'windows-latest'
      - name: upload artifact macOS
        uses: actions/upload-artifact@v3
        with:
          name: apivalidator-macOS
          path: ./build/bin/apivalidator.zip
        if: matrix.os == 'macos-latest'
      - name: upload artifact linux
        uses: actions/upload-artifact@v3
        with:
          name: apivalidator-linux
          path: apivalidator.tar.gz
        if: matrix.os == 'ubuntu-latest'
      - name: upload artifact windows
        uses: actions/upload-artifact@v3
        with:
          name: apivalidator-windows
          path: apivalidator.zip
        if: matrix.os == 'windows-latest'
        
  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Download linux package
        uses: actions/download-artifact@v1
        with:
          name: apivalidator-linux
      - name: Download windows package
        uses: actions/download-artifact@v1
        with:
          name: apivalidator-windows
      - name: Download macOS package
        uses: actions/download-artifact@v1
        with:
          name: apivalidator-macOS
      - name: Rename Files
        run: |
          mv ./apivalidator-linux/apivalidator.tar.gz ./apivalidator-linux/apivalidator_${{ github.ref_name }}_linux_x86_64.tar.gz
          mv ./apivalidator-macOS/apivalidator.zip ./apivalidator-macOS/apivalidator_${{ github.ref_name }}_macOS.zip
          mv ./apivalidator-windows/apivalidator.zip ./apivalidator-windows/apivalidator_${{ github.ref_name }}_windows.zip
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: true
          prerelease: true
          generate_release_notes: true
          files: |
            ./apivalidator-linux/apivalidator_${{ github.ref_name }}_linux_x86_64.tar.gz
            ./apivalidator-macOS/apivalidator_${{ github.ref_name }}_macOS.zip
            ./apivalidator-windows/apivalidator_${{ github.ref_name }}_windows.zip